###############################################################################
# TELEGRAF SNMP NETWORK TEMPLATE (MULTI-VENDOR) - SIMPLIFIED VERSION
# Output chuẩn hoá CPU và RAM: cpu_used_percent, mem_used_percent
# Output chuẩn hóa Network: net
###############################################################################

# ======================================
# GLOBAL CONFIG
# ======================================
[global_tags]
  service = "telegraf-snmp"
  environment = "production"

[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  hostname = ""
  omit_hostname = false
  debug = false
  quiet = false

# =========================
# OUTPUTS InfluxDB v2
# =========================
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"
  timeout = "60s"

# ======================================
# SWITCHES - INTERFACE TABLE
# ======================================
[[inputs.snmp]]
  name_override = "switch_interfaces"
  agents = [
    "10.10.22.1:161",
    "10.10.22.2:161",
    "10.10.22.11:161",
    "10.10.22.12:161",
    "10.10.22.51:161"
  ]
  timeout = "5s"
  retries = 1
  version = 2
  community = "123qwe"

  [[inputs.snmp.field]]
    name = "device_name"
    oid  = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.table]]
    name = "net"
    oid = "1.3.6.1.2.1.2.2"

# ======================================
# FIREWALLS - INTERFACE TABLE
# ======================================
[[inputs.snmp]]
  name_override = "firewall_interfaces"
  agents = [
    "10.10.22.252:161"
  ]
  timeout = "5s"
  retries = 1
  version = 2
  community = "123qwe"

  [[inputs.snmp.field]]
    name = "device_name"
    oid  = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.table]]
    name = "net"
    oid = "1.3.6.1.2.1.2.2"

###############################################################################
# CPU và RAM DELL N‑SERIES
###############################################################################
[[inputs.snmp]]
  name_override = "switch_sys"
  agents = [
    "10.10.22.51:161",
  ]
  version = 2
  community = "123qwe"
  timeout = "10s"
  retries = 3

  [[inputs.snmp.field]]
    name = "device_name"
    oid  = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "sys_object_id"
    oid  = "1.3.6.1.2.1.1.2.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "sys_uptime"
    oid  = "1.3.6.1.2.1.1.3.0"

  # CPU Dell
  [[inputs.snmp.field]]
    name = "dell_cpu_string"
    oid  = "1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.9.0"

  # RAM Dell
  [[inputs.snmp.field]]
    name = "dell_mem_total"
    oid  = "1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.2.0"

  [[inputs.snmp.field]]
    name = "dell_mem_free"
    oid  = "1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.1.0"

###############################################################################
# CPU và RAM CISCO IOS
###############################################################################
[[inputs.snmp]]
  name_override = "switch_sys"
  agents = [
    "10.10.22.1:161",
    "10.10.22.2:161",
  ]
  version = 2
  community = "123qwe"
  timeout = "10s"
  retries = 3

  [[inputs.snmp.field]]
    name = "device_name"
    oid  = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "sys_object_id"
    oid  = "1.3.6.1.2.1.1.2.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "sys_uptime"
    oid  = "1.3.6.1.2.1.1.3.0"

  # CPU Cisco - Specific index (19 from your test)
  [[inputs.snmp.field]]
    name = "cisco_cpu_5min"
    oid  = "1.3.6.1.4.1.9.9.109.1.1.1.1.8.19"

  # RAM Cisco - Specific index (1 and 11 from your test)
  [[inputs.snmp.field]]
    name = "cisco_mem_pool_used_1"
    oid  = "1.3.6.1.4.1.9.9.48.1.1.1.5.1"

  [[inputs.snmp.field]]
    name = "cisco_mem_pool_free_1"
    oid  = "1.3.6.1.4.1.9.9.48.1.1.1.6.1"

  [[inputs.snmp.field]]
    name = "cisco_mem_pool_used_11"
    oid  = "1.3.6.1.4.1.9.9.48.1.1.1.5.11"

  [[inputs.snmp.field]]
    name = "cisco_mem_pool_free_11"
    oid  = "1.3.6.1.4.1.9.9.48.1.1.1.6.11"

###############################################################################
# CPU và RAM FORTINET
###############################################################################
[[inputs.snmp]]
  name_override = "firewall_sys"
  agents = ["10.10.22.252:161"]
  timeout = "5s"
  retries = 2
  version = 2
  community = "123qwe"

  [[inputs.snmp.field]]
    name = "device_name"
    oid  = "1.3.6.1.2.1.1.5.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "sys_object_id"
    oid  = "1.3.6.1.2.1.1.2.0"
    is_tag = true

  [[inputs.snmp.field]]
    name = "sys_uptime"
    oid  = "1.3.6.1.2.1.1.3.0"

  [[inputs.snmp.field]]
    name = "cpu_usage"
    oid  = "1.3.6.1.4.1.12356.101.4.1.3.0"

  [[inputs.snmp.field]]
    name = "mem_usage"
    oid  = "1.3.6.1.4.1.12356.101.4.1.4.0"

###############################################################################
# SIMPLIFIED STARLARK PROCESSOR
###############################################################################
[[processors.starlark]]
  namepass = ["switch_interfaces", "firewall_interfaces", "switch_sys", "firewall_sys"]
  source = '''
def apply(metric):
    # Get sys_object_id for vendor detection
    sys_obj = ""
    if "sys_object_id" in metric.tags:
        sys_obj = metric.tags["sys_object_id"]

    # Dell processing
    if sys_obj.startswith(".1.3.6.1.4.1.674"):
        # CPU processing - parse string like "    5 Secs ( 18.674%)   60 Secs ( 18.2739%)  300 Secs ( 18.1035%)"
        if "dell_cpu_string" in metric.fields:
            cpu_str = metric.fields["dell_cpu_string"]
            if cpu_str != None:
                # Extract 60 Secs value
                text = str(cpu_str).strip()
                key = "60 Secs ("
                i = text.find(key)
                if i >= 0:
                    j = i + len(key)
                    k = text.find("%", j)
                    if k >= 0:
                        num_str = text[j:k].strip()
                                        # Simple float conversion without try/catch
                if num_str.replace(".", "").isdigit():
                    cpu_val = float(num_str)
                    metric.fields["cpu_used_percent"] = cpu_val

        # Memory processing
        if "dell_mem_total" in metric.fields and "dell_mem_free" in metric.fields:
            total = metric.fields["dell_mem_total"]
            free = metric.fields["dell_mem_free"]
            if total != None and free != None and total > 0:
                used_pct = 100.0 * (1.0 - (free / total))
                metric.fields["mem_used_percent"] = used_pct

    # Cisco processing
    elif sys_obj.startswith(".1.3.6.1.4.1.9"):
        # CPU processing
        if "cisco_cpu_5min" in metric.fields:
            cpu_val = metric.fields["cisco_cpu_5min"]
            if cpu_val != None:
                metric.fields["cpu_used_percent"] = float(cpu_val)

        # Memory processing - use pool 1 (main memory pool)
        if "cisco_mem_pool_used_1" in metric.fields and "cisco_mem_pool_free_1" in metric.fields:
            used = metric.fields["cisco_mem_pool_used_1"]
            free = metric.fields["cisco_mem_pool_free_1"]
            if used != None and free != None and (used + free) > 0:
                mem_pct = 100.0 * used / (used + free)
                metric.fields["mem_used_percent"] = mem_pct

    # Fortinet processing
    elif sys_obj.startswith(".1.3.6.1.4.1.12356"):
        # CPU processing
        if "cpu_usage" in metric.fields:
            cpu_val = metric.fields["cpu_usage"]
            if cpu_val != None:
                metric.fields["cpu_used_percent"] = float(cpu_val)

        # Memory processing
        if "mem_usage" in metric.fields:
            mem_val = metric.fields["mem_usage"]
            if mem_val != None:
                metric.fields["mem_used_percent"] = float(mem_val)

    return metric
'''

# Converter processor
[[processors.converter]]
  namepass = ["switch_interfaces", "firewall_interfaces", "switch_sys", "firewall_sys"]
  [processors.converter.fields]
    float = ["cpu_used_percent", "mem_used_percent"]

# Debug processor (uncomment to enable)
# [[processors.printer]]
#   log_level = "DEBUG"


# Cisco Business 220 Series Switch Monitoring
# This configuration uses exec input to run Python script for collecting switch metrics

[[inputs.exec]]
  ## Commands array
  commands = [
    "python3 /scripts/cisco-small-business-200series/device_cisco.py"
  ]

  ## Timeout for each command to complete
  timeout = "60s"

  ## Measurement name suffix (or override)
  name_override = "switch_sys"

  ## Data format to consume
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "influx"

  ## Interval to run the commands
  interval = "60s"

  ## Add additional tags
  [inputs.exec.tags]
    device_type = "cisco_switch"
    device_series = "business_220"
    collection_method = "ssh"
